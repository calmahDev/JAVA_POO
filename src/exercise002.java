import java.util.ArrayList;

/**
Each new term in the Fibonacci sequence is generated by adding the previous two terms. By Starting with 1 and 2, the first 10 terms will be:
 1,2,3,5,8,13,21,34,55,89...
 By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms
 */
public class exercise002 {
    public static void main(String[] args) {
        ArrayList<Integer> fibo = generateFibonacci(1, 2, 4000000);
        ArrayList<Integer> even = filterEvenValues(fibo);
        int sum = calculateSum(even);

        System.out.println("Sum of even Fibonacci numbers: " + sum);
        System.out.println("Even Fibonacci numbers: " + even);
        System.out.println("All Fibonacci numbers: " + fibo);
    }

    private static ArrayList<Integer> generateFibonacci(int num1, int num2, int stop) {
        int sum = 0;
        ArrayList<Integer> numbers = new ArrayList<Integer>();
        numbers.add(num1);
        numbers.add(num2);

        while (sum < stop) {
            sum = numbers.get(numbers.size() - 1) + numbers.get(numbers.size() - 2);

            if (sum < stop) {
                numbers.add(sum);
            }
        }

        return numbers;
    }

    private static ArrayList<Integer> filterEvenValues(ArrayList<Integer> fibo) {
        ArrayList<Integer> even = new ArrayList<Integer>();
        int x = 0;

        while (x < fibo.size()) {
            if (fibo.get(x) % 2 == 0) {
                even.add(fibo.get(x));
            }
            x++;
        }

        return even;
    }

    private static int calculateSum(ArrayList<Integer> even) {
        return even.stream().mapToInt(Integer::intValue).sum();
    }
}
